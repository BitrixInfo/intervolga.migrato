<?
namespace Intervolga\Migrato\Data\Module\Main;


use Bitrix\Main\Localization\Loc;
use Intervolga\Migrato\Data\BaseData;
use Intervolga\Migrato\Data\Link;
use Intervolga\Migrato\Data\Record;
use Intervolga\Migrato\Data\RecordId;

class GroupRights extends BaseData
{
	const ALL_USERS_GROUP_ID = 2;
	const XML_ID_DELIMITER = '_';

	protected function configure()
	{
		$this->setEntityNameLoc(Loc::getMessage('INTERVOLGA_MIGRATO.MAIN_GROUP_RIGHT'));
		$this->setFilesSubdir('/');
		$this->setDependencies(array(
			'GROUP' => new Link(Group::getInstance()),
			'TASK' => new Link(Task::getInstance()),
		));
	}

	/**
	 * @param string[] $filter
	 *
	 * @return \Intervolga\Migrato\Data\Record[]
	 */
	public function getList(array $filter = array())
	{
		//Get all users groups
		$rsGroups = \CGroup::GetList($by="ID", $order="asc", array("ADMIN"=>'N')); // выбираем группы
		$groups = array();
		while($g = $rsGroups->Fetch())
		{
			if($g['ID'] != static::ALL_USERS_GROUP_ID)
				$groups[] = $g;
		}
		//Get all modules
		$modulesId = array();
		$rsInstalledModules = \CModule::GetList();
		while ($m = $rsInstalledModules->Fetch())
			$modulesId[] = $m['ID'];
		$result = array();
		foreach ($groups as $group) {
			$record = new Record($this);
			$record->setId($this->createId($group["ID"]));
			$record->setXmlId($group["STRING_ID"]);
			$fields = array();
			$dependencylist = array();
			foreach ($modulesId as $moduleId)
			{
				$roles = \CMain::GetUserRoles($moduleId, array($group["ID"]),'N');
				if($roles) {
					$tasksId = array();
					$dbRes = \CTask::GetList(array(), array( // TODO BINDING
						'MODULE_ID' => $moduleId
					));
					while ($task = $dbRes->fetch()) {
						if (in_array($task['LETTER'], $roles)) {
							$tasksId[] = $task['ID'];
						}
					}
					if ($tasksId) {
						$dependencylist[$moduleId] = $tasksId;
					}
					else{
						$fields[$moduleId] = $moduleId."___".$roles[0];
					}

				}
			}
			if($fields)
				$record->addFieldsRaw(array(
					'CODE_RIGHT' => $fields,
				));
			$this->addGroupDependency($record, $group['ID']);
			if($dependencylist)
				$this->addTaskDependency($record, $dependencylist);
			$result[] = $record;
		}
		return $result;
	}

	/**
	 * @param \Intervolga\Migrato\Data\Record $record
	 * @param $groupId
	 */
	private function addGroupDependency($record, $groupId)
	{
		$groupLink = clone($this->getDependency('GROUP'));
		$groupXmlId = Group::getInstance()->getXmlId(Group::getInstance()->createId($groupId));
		$groupLink->setValue($groupXmlId);
		$record->addDependencies(array('GROUP'=>$groupLink));
	}

	/**
	 * @param \Intervolga\Migrato\Data\Record $record
	 * @param $taskId
	 */
	private function addTaskDependency($record,array $tasksId)
	{
		$taskLinks = array();
		foreach ($tasksId as $id => $taskId)
		{
			$taskLink = clone($this->getDependency('TASK'));
			$taskLink->setValue(Task::getInstance()->getXmlId($taskId[0]));
			$taskLinks['RIGHT_'.$id] = $taskLink;
		}
		$record->addDependencies($taskLinks);
	}

	/**
	 * @param \Intervolga\Migrato\Data\Record $record
	 *
	 * @throws \Bitrix\Main\NotImplementedException
	 */
	public function update(Record $record)
	{
		parent::update($record); // TODO: Change the autogenerated stub
	}

	/**
	 * @param \Intervolga\Migrato\Data\Record $record
	 *
	 * @throws \Bitrix\Main\NotImplementedException
	 *
	 * @return \Intervolga\Migrato\Data\RecordId
	 */
	protected function createInner(Record $record)
	{
		parent::createInner($record); // TODO: Change the autogenerated stub
	}

	/**
	 * @param \Intervolga\Migrato\Data\RecordId $id
	 *
	 * @throws \Bitrix\Main\NotImplementedException
	 */
	protected function deleteInner(RecordId $id)
	{
		parent::deleteInner($id); // TODO: Change the autogenerated stub
	}

	/**
	 * @param string $xmlId
	 *
	 * @return \Intervolga\Migrato\Data\RecordId|null
	 */
	public function findRecord($xmlId)
	{
		$delPos = strpos ($xmlId , static::XML_ID_DELIMITER);
		if($delPos)
		{
			$moduleId = substr($xmlId, 0, $delPos);
			$groupXmlId = substr($xmlId, $delPos+1);
			$groupRecId = Group::getInstance()->findRecord($groupXmlId);
			$groupId = $groupRecId->getValue();
			if(\CMain::GetUserRoles($moduleId, array($groupId),'N'))
			{
				return $this->createId(array(
					'MODULE_ID'=>$moduleId,
					'GROUP_ID'=>$groupId)
				);
			}
			return null;
		}
	}

	/**
	 * @param \Intervolga\Migrato\Data\RecordId $id
	 * @param string $xmlId
	 *
	 * @throws \Bitrix\Main\NotImplementedException
	 */
	public function setXmlId($id, $xmlId)
	{
		parent::setXmlId($id, $xmlId); // TODO: Change the autogenerated stub
	}

	/**
	 * @param \Intervolga\Migrato\Data\RecordId $id
	 *
	 * @return string
	 * @throws \Bitrix\Main\NotImplementedException
	 */
	public function getXmlId($id)
	{
		$data = $id->getValue();
		return $this->createXmlId($data);
	}
}