<?
namespace Intervolga\Migrato\Data\Module\Main;


use Bitrix\Main\Localization\Loc;
use Intervolga\Migrato\Data\BaseData;
use Intervolga\Migrato\Data\Link;
use Intervolga\Migrato\Data\Record;
use Intervolga\Migrato\Data\RecordId;

class GroupRights extends BaseData
{
	const ALL_USERS_GROUP_ID = 2;
	const XML_ID_DELIMITER = '_';
	/**
	 * @param string[] $filter
	 *
	 * @return \Intervolga\Migrato\Data\Record[]
	 */
	public function getList(array $filter = array())
	{
		//Получить список всех групп пользователей
		$rsGroups = \CGroup::GetList($by="ID", $order="asc", array("ADMIN"=>'N')); // выбираем группы
		$groups = array();
		while($g = $rsGroups->Fetch())
		{
			if($g['ID'] != ALL_USERS_GROUP_ID)
				$groups[] = $g['ID'];
		}
		//Получить список всех модулей
		$rsInstalledModules = \CModule::GetList();
		$result = array();
		while ($m = $rsInstalledModules->Fetch())
		{
			$moduleId = $m['ID'];
			foreach ($groups as $groupId)
			{
				$roles = \CMain::GetUserRoles($moduleId, array($groupId),'N');
				if($roles)
				{
					$tasksId = array();
					$dbRes = \CTask::GetList(array(),array(
						'MODULE_ID' => $moduleId
					));
					while ($task = $dbRes->fetch())
					{
						if (in_array($task['LETTER'], $roles))
						{
							$tasksId[] = $task['ID'];

						}
					}
					if($tasksId)
					{
						$uniqData = array(
							'MODULE_ID' => $moduleId, 'GROUP_ID' => $groupId
						);
						$record = new Record($this);
						$record->setId($this->createId($uniqData));
						$record->setXmlId($this->createXmlId($uniqData));
						$record->addFieldsRaw(array(
							'MODULE_ID' => $moduleId,
						));
						$this->addTaskDependency($record, $tasksId);
						$this->addGroupDependency($record, $groupId);
						$result[] = $record;
					}
				}
			}
		}
		return $result;
	}

	/**
	 * @param \Intervolga\Migrato\Data\Record $record
	 * @param $groupId
	 */
	private function addGroupDependency($record, $groupId)
	{
		$groupLink = clone($this->getDependency('GROUP'));
		$groupRecordId = Group::getInstance()->createId($groupId);
		$groupLink->setValue($groupRecordId->getValue());
		$record->setDependency('GROUP', $groupLink);
	}

	/**
	 * @param \Intervolga\Migrato\Data\Record $record
	 * @param $taskId
	 */
	private function addTaskDependency($record,array $tasksId)
	{
		foreach ($tasksId as $taskId)
		{
			$taskLink = clone($this->getDependency('TASK'));
			$taskLink->setValue(Task::getInstance()->getXmlId($taskId));
			$record->setDependency('TASK', $taskLink);
		}
	}

	protected function configure()
	{
		$this->setEntityNameLoc(Loc::getMessage('INTERVOLGA_MIGRATO.MAIN_GROUP_RIGHT'));
		$this->setFilesSubdir('/');
		$this->setDependencies(array(
			'GROUP' => new Link(Group::getInstance()),
			'TASK' => new Link(Task::getInstance()),
		));
	}

	/**
	 * @param \Intervolga\Migrato\Data\Record $record
	 *
	 * @throws \Bitrix\Main\NotImplementedException
	 */
	public function update(Record $record)
	{
		parent::update($record); // TODO: Change the autogenerated stub
	}

	/**
	 * @param \Intervolga\Migrato\Data\Record $record
	 *
	 * @throws \Bitrix\Main\NotImplementedException
	 *
	 * @return \Intervolga\Migrato\Data\RecordId
	 */
	protected function createInner(Record $record)
	{
		parent::createInner($record); // TODO: Change the autogenerated stub
	}

	/**
	 * @param \Intervolga\Migrato\Data\RecordId $id
	 *
	 * @throws \Bitrix\Main\NotImplementedException
	 */
	protected function deleteInner(RecordId $id)
	{
		parent::deleteInner($id); // TODO: Change the autogenerated stub
	}

	/**
	 * @param string $xmlId
	 *
	 * @return \Intervolga\Migrato\Data\RecordId|null
	 */
	public function findRecord($xmlId)
	{
		$delPos = strpos ($xmlId , XML_ID_DELIMITER);
		if($delPos)
		{
			$moduleId = substr($xmlId, 0, $delPos);
			$groupXmlId = substr($xmlId, $delPos+1);
			$groupRecId = Group::getInstance()->findRecord($groupXmlId);
			$groupId = $groupRecId->getValue();
			if(\CMain::GetUserRoles($moduleId, array($groupId),'N'))
			{
				return $this->createId(array(
					'MODULE_ID'=>$moduleId,
					'GROUP_ID'=>$groupId)
				);
			}
			return null;
		}
	}

	/**
	 * @param \Intervolga\Migrato\Data\RecordId $id
	 * @param string $xmlId
	 *
	 * @throws \Bitrix\Main\NotImplementedException
	 */
	public function setXmlId($id, $xmlId)
	{
		parent::setXmlId($id, $xmlId); // TODO: Change the autogenerated stub
	}

	/**
	 * @param \Intervolga\Migrato\Data\RecordId $id
	 *
	 * @return string
	 * @throws \Bitrix\Main\NotImplementedException
	 */
	public function getXmlId($id)
	{
		$data = $id->getValue();
		return $this->createXmlId($data);
	}

	private function createXmlId($data)
	{
		return ($data['MODULE_ID'].XML_ID_DELIMITER.Group::getInstance()->getXmlId(Group::getInstance()->createId(intval($data['GROUP_ID']))));
	}


	public function createId($id)
	{
		return RecordId::createComplexId(array(
				"MODULE_ID" => $id['MODULE_ID'],
				"GROUP_ID" => $id['GROUP_ID']
			)
		);
	}
}